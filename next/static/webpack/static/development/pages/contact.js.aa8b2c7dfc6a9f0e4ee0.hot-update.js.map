{"version":3,"file":"static/webpack/static/development/pages/contact.js.aa8b2c7dfc6a9f0e4ee0.hot-update.js","sources":["webpack:///./sections/Contact/Contact.js"],"sourcesContent":["'use strict';\nimport React, { Component, Fragment } from 'react';\nimport { TweenMax, TimelineMax } from 'gsap';\nimport Recaptcha from 'react-google-recaptcha';\nimport URLJoin from 'url-join';\nimport settings from '../../util/settings';\nimport Social from '../../components/Social/Social';\nimport { InputField, TextArea, SelectList } from '../../components/Form/index';\nimport fetch from 'isomorphic-fetch';\nimport { cloneDeep } from 'lodash';\n\nclass Contact extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validCaptcha: settings.isDev,\n      showError: false,\n      email: {\n        submitted: false,\n        sent: false,\n        failed: false,\n        formError: ''\n      }\n    }\n    this.AnimationElements = []\n    this.InputFields = []\n    this.SelectLists = []\n  }\n  componentDidMount() {\n    TweenMax.to(this.container, 0.5, {autoAlpha: 1});\n    TweenMax.set(this.AnimationElements, {autoAlpha: 0});\n    this.animateIn();\n\n    window.addEventListener('scroll', this.handleScroll);\n    this.handleScroll()\n  }\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n    TweenMax.set(this.container, {autoAlpha: 0});\n  }\n  handleInputChange = (e, item)=>{\n\n  }\n  handleScroll = (e) => {\n    if (this.props.isResponsive) {\n      if (this.container.getBoundingClientRect().top <= window.innerHeight/2) {\n        this.animateIn();\n        window.removeEventListener('scroll', this.handleScroll);\n      }\n    } else {\n      if (this.container.getBoundingClientRect().top < window.innerHeight) {\n        this.animateIn();\n        window.removeEventListener('scroll', this.handleScroll);\n      }\n    }\n  }\n  animateIn = () => {\n    var tl = new TimelineMax({paused: true});\n    tl.staggerFromTo(this.AnimationElements, 2, {autoAlpha: 0, y: 50}, {autoAlpha: 1, y: 0, ease: Expo.easeOut}, 0.25);\n    tl.play();\n  }\n  handleReCaptcha = (value) => {\n    this.setState({\n      validCaptcha: value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let emailState = cloneDeep(this.state.email);\n    emailState.formError = '';\n    \n    let valid = true;\n    for (var i = 0; i < this.InputFields.length; i++) {\n      if (!this.InputFields[i].state.valid) {\n        emailState.formError = 'Please fill out all form fields';\n        valid = false;\n        break;\n      }\n    }\n    if (!this.state.validCaptcha) {\n      valid = false;\n      emailState.formError = 'Please complete the reCAPTCHA';\n    }\n    if (valid) {\n      emailState.submitted = true;\n      this.setState({ email: emailState });\n      fetch(URLJoin(settings.server, 'forms', 'mail.php'), {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          \"Content-type\": \"application/x-www-form-urlencoded\"\n        },\n        body: JSON.stringify(this.getFormContent())\n      }).then((response) => {\n        if (!response.ok) {\n          emailState.failed = true;\n          this.setState({ email: emailState });\n          throw new Error('Something went wrong');\n        } else {\n          this.resetForm();\n          emailState.sent = true;\n          this.setState({ email: emailState, showError: false });\n        }\n        return response.json();\n      }).then((data)=>{\n        if (settings.isDev) {\n          // console.log(data)\n          document.open();\n          document.write(data);\n        }\n      }).catch(msg => {\n        emailState.failed = true;\n        this.setState({ email: emailState });\n      })\n    } else {\n      this.setState({ email: emailState, showError: true });\n    }\n  }\n\n  getFormContent = () => {\n    var obj = {};\n    for (var i = 0; i < this.InputFields.length; i++) {\n      obj[this.InputFields[i].props.id] = this.InputFields[i].state.value\n    }\n    for (var i = 0; i < this.SelectLists.length; i++) {\n      obj[this.SelectLists[i].props.id] = this.SelectLists[i].state.value\n    }\n    return obj;\n  }\n\n  resetForm = () => {\n    this.InputFields.forEach( field => {\n      field.reset();\n    });\n    this.SelectLists.forEach( field => {\n      field.reset();\n    });\n  }\n\n  render() {\n    this.AnimationElements = []\n    this.InputFields = []\n    this.SelectLists = []\n    const { title, description } = this.props;\n    return <div\n      className=\"section-contact\"\n      ref={el => this.container = el}\n    >\n      <div className=\"ContentContainer\">\n        <h1 className=\"dark\">{ title || 'Contact Us' }</h1>\n        { description &&\n          <p className=\"dark mini\" style={{ maxWidth: 430, marginBottom: '2.5rem' }}>\n            { description }\n          </p>\n        }\n        <div className=\"row\">\n          <div className=\"col-md-7\" style={{ maxWidth: 600 }}>\n            <form onSubmit={this.handleSubmit}>\n              {/* InputFields */}\n              <div className=\"row\" ref={el => this.AnimationElements[0] = el}>\n                <div className=\"col-sm-6\">\n                  <InputField label=\"First Name\" id=\"fname\"\n                              showError={this.state.showError} ref={el => this.InputFields[0] = el}\n                              onChange={this.handleInputChange} isRequired />\n                </div>\n                <div className=\"col-sm-6\">\n                  <InputField label=\"Last Name\" id=\"lname\"\n                              showError={this.state.showError} ref={el => this.InputFields[1] = el}\n                              onChange={this.handleInputChange} isRequired />\n                </div>\n              </div>\n              <div className=\"row\" ref={el => this.AnimationElements[1] = el}>\n                <div className=\"col-sm-6\">\n                  <InputField label=\"Email\" id=\"email\" isRequired type=\"email\"\n                              showError={this.state.showError} ref={el => this.InputFields[2] = el} />\n                </div>\n                <div className=\"col-sm-6\">\n                  <InputField label=\"Phone\" id=\"phone\" isRequired type=\"phone\"\n                              showError={this.state.showError} ref={el => this.InputFields[3] = el} />\n                </div>\n              </div>\n              <div className=\"row\" ref={el => this.AnimationElements[2] = el}>\n                <div className=\"col-sm-6\">\n                  <SelectList\n                    ref={el => this.SelectLists[0] = el}\n                    id=\"preferredcontact\"\n                    label=\"Preferred Contact\"\n                    options={[ 'Email', 'Phone' ]} />\n                </div>\n                <div className=\"col-sm-6\">\n                  <InputField label=\"Postal Code\" id=\"postalcode\" isRequired type=\"postalcode\" minLength={6} maxLength={7}\n                              showError={this.state.showError} ref={el => this.InputFields[4] = el} />\n                </div>\n              </div>\n              {/* TextArea */}\n              <div className=\"row\" ref={el => this.AnimationElements[3] = el}>\n                <div className=\"col-12\">\n                  <TextArea label=\"Message\" id=\"message\" placeholder=\"How can we help you? When is the best time to contact you?\"\n                            isRequired showError={this.state.showError}\n                            onChange={this.handleInputChange} ref={el => this.InputFields[5] = el}/>\n                </div>\n              </div>\n              <div ref={el => this.AnimationElements[4] = el} style={{ marginBottom: 10 }}>\n                <Recaptcha\n                  key=\"captcha\"\n                  className=\"recaptcha\"\n                  onChange={this.handleReCaptcha}\n                  sitekey={settings.googleReCaptchaKey}\n                />\n              </div>\n              <div ref={el => this.AnimationElements[5] = el}>\n                <a role='button' className='cta dark' onClick={ this.handleSubmit }>Send Message</a>\n              </div>\n              <div className=\"delivery-info\" ref={el => this.AnimationElements[6] = el}>\n              { this.state.email.submitted ? (\n                  <Fragment>\n                    { this.state.email.sent &&\n                      <Fragment>\n                        <p style={{ fontWeight: 'bold' }}>Your message has been sent!</p>\n                        <p>A member of our team will be in touch with you as soon as possible.</p>\n                      </Fragment>  \n                    }\n                    { this.state.email.failed &&\n                      <p>Sorry, there was an error sending your email. Please try again later.</p>\n                    }\n                    { !this.state.email.sent && !this.state.email.failed &&\n                      <p>Sending email...</p>\n                    }\n                  </Fragment>\n                ) : (\n                  <p>{ this.state.email.formError }</p>\n                )\n              }\n              </div>\n            </form>\n          </div>\n          <div className=\"offset-md-1 col-md-4 contact-details d-none d-md-block\">\n            <h6>Contact Info</h6>\n            <p>Phone: <a href='tel:+18002088480'>1-800-208-8480</a></p>\n            <p>Fax: 1-844-299-8480</p>\n            <p>E-mail: <a href='mailto:info@hospall.com'>info@hospall.com</a></p>\n            <h6 className=\"offset\">Connect With Us</h6>\n            <Social />\n          </div>\n        </div>\n      </div>\n    </div>;\n  }\n};\n\nContact.defaultProps = {\n  windowWidth: 960,\n  windowHeight: 570\n};\n\nexport default Contact;\n"],"mappings":"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","sourceRoot":""}
