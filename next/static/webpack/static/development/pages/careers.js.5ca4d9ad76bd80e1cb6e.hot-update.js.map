{"version":3,"file":"static/webpack/static/development/pages/careers.js.5ca4d9ad76bd80e1cb6e.hot-update.js","sources":["webpack:///./sections/JobApplication/JobApplication.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { TweenMax, TimelineMax } from 'gsap';\nimport Recaptcha from 'react-google-recaptcha';\nimport { cloneDeep } from 'lodash';\nimport URLJoin from 'url-join';\nimport fetch from 'isomorphic-fetch';\nimport axios from 'axios';\nimport { InputField, TextArea, SelectList } from '../../components/Form/index';\nimport data from '../../static/json/data.json';\nimport settings from '../../util/settings';\n\nclass JobApplication extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validCaptcha: settings.isDev,\n      showError: false,\n      email: {\n        submitted: false,\n        sent: false,\n        failed: false,\n        formError: ''\n      }\n    }\n    this.AnimationElements = []\n    this.InputFields = []\n    this.SelectLists = []\n\n    this.positionTitles = [];\n    data.careers.forEach(career => this.positionTitles.push(career.position))\n  }\n  componentDidMount() {\n    TweenMax.to(this.container, 0.5, {autoAlpha: 1});\n    TweenMax.set(this.AnimationElements, {autoAlpha: 0});\n    this.animateIn();\n\n    window.addEventListener('scroll', this.handleScroll);\n    this.handleScroll()\n  }\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n    TweenMax.set(this.container, {autoAlpha: 0});\n  }\n  handleInputChange = (e, item)=>{\n\n  }\n  handleScroll = (e) => {\n    if (this.props.isResponsive) {\n      if (this.container.getBoundingClientRect().top <= window.innerHeight/2) {\n        this.animateIn();\n        window.removeEventListener('scroll', this.handleScroll);\n      }\n    } else if (this.container.getBoundingClientRect().top < window.innerHeights) {\n      this.animateIn();\n      window.removeEventListener('scroll', this.handleScroll);\n    }\n  }\n  animateIn = () => {\n    const tl = new TimelineMax({paused: true});\n    tl.staggerFromTo(this.AnimationElements, 2, {autoAlpha: 0, y: 50}, {autoAlpha: 1, y: 0, ease: Expo.easeOut}, 0.25);\n    tl.play();\n  }\n  handleReCaptcha = (value) => {\n    this.setState({\n      validCaptcha: value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const emailState = cloneDeep(this.state.email);\n\n    if (!emailState.submitted) {\n      emailState.formError = '';\n      emailState.failed = false;\n      \n      let valid = true;\n      for (let i = 0; i < this.InputFields.length; i++) {\n        if (!this.InputFields[i].state.valid) {\n          emailState.formError = `Please fill out '${this.InputFields[i].props.label}' field`;\n          valid = false;\n          break;\n        }\n      }\n      if (!this.state.validCaptcha) {\n        valid = false;\n        emailState.formError = 'Please complete the reCAPTCHA';\n      }\n      if (valid) {\n        emailState.submitted = true;\n        this.setState({ email: emailState });\n        axios.post(URLJoin(settings.server, 'forms', 'careers.php'), this.getFormContent(), {\n          headers: {\n            'Accept': 'application/json',\n            \"Content-type\": \"multipart/form-data\"\n          }\n        }).then(response => {\n          this.resetForm();\n          emailState.sent = true;\n          emailState.submitted = false;\n          this.setState({ email: emailState });\n          // if (settings.isDev) {\n          //   document.open();\n          //   document.write(response.data);\n          // }\n        }).catch(error => {\n          emailState.failed = true;\n          emailState.submitted = false;\n          console.log(error);\n          if (error.response && error.response.status === 400) {\n            emailState.formError = error.response.data || 'An unknown error occurred. Please try again later.';\n          }\n          this.setState({ email: emailState });\n        })\n      } else {\n        this.setState({ email: emailState });\n      }\n    }\n  }\n\n  getFormContent = () => {\n    const formData = new FormData();\n    const arr = [this.InputFields, this.SelectLists];\n    arr.forEach(j => {\n      for (let i = 0; i < j.length; i++) {\n        formData.append(j[i].props.id, j[i].props.type === 'file' && j[i].state.files ? j[i].state.files[0] : j[i].state.value);\n      }\n    });\n    return formData;\n  }\n\n  resetForm = () => {\n    this.InputFields.forEach( field => {\n      field.reset();\n    });\n    this.SelectLists.forEach( field => {\n      field.reset();\n    });\n  }\n\n  render() {\n    this.AnimationElements = []\n    this.InputFields = []\n    this.SelectLists = []\n\n    return (\n      <div\n        className=\"job-application\"\n        id=\"job-application-form\"\n        ref={el => { this.container = el }}\n      >\n        <div className=\"ContentContainer\">\n          <h2 className=\"job-application-title\">Apply Now</h2>\n          <div className=\"row\">\n            <div className=\"col-md-7\" style={{ maxWidth: 600 }}>\n              <form onSubmit={this.handleSubmit} encType='multipart/form-data'>\n                {/* InputFields */}\n                <div className=\"row\" ref={el => this.AnimationElements[0] = el}>\n                  <div className=\"col-sm-6\">\n                    <InputField label=\"First Name\" id=\"fname\"\n                      showError={this.state.showError} ref={el => this.InputFields[0] = el}\n                      onChange={this.handleInputChange} isRequired />\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <InputField label=\"Last Name\" id=\"lname\"\n                      showError={this.state.showError} ref={el => this.InputFields[1] = el}\n                      onChange={this.handleInputChange} isRequired />\n                  </div>\n                </div>\n                <div className=\"row\" ref={el => this.AnimationElements[1] = el}>\n                  <div className=\"col-sm-6\">\n                    <InputField label=\"Email\" id=\"email\" isRequired type=\"email\"\n                      showError={this.state.showError} ref={el => this.InputFields[2] = el} />\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <InputField label=\"Your Phone\" id=\"phone\" isRequired type=\"phone\"\n                      showError={this.state.showError} ref={el => this.InputFields[3] = el} />\n                  </div>\n                </div>\n                <div className=\"row\" ref={el => this.AnimationElements[2] = el}>\n                  <div className=\"col-sm-6\">\n                    <SelectList\n                      ref={el => this.SelectLists[0] = el}\n                      id=\"position\"\n                      label=\"Position\"\n                      options={this.positionTitles} />\n                  </div>\n                  <div className=\"col-sm-6\">\n                    <InputField label=\"Resume / CV\" id=\"resume\" isRequired type=\"file\"\n                      accept={['pdf', 'doc', 'docx']}\n                      showError={this.state.showError} ref={el => this.InputFields[4] = el} />\n                  </div>\n                </div>\n                {/* TextArea */}\n                <div className=\"row\" ref={el => this.AnimationElements[3] = el}>\n                  <div className=\"col-12\">\n                    <TextArea label=\"Message\" id=\"message\" placeholder=\"(Optional)\"\n                      showError={this.state.showError} onChange={this.handleInputChange} ref={el => this.InputFields[5] = el}/>\n                  </div>\n                </div>\n                <div ref={el => this.AnimationElements[4] = el} style={{ marginBottom: 10 }}>\n                  <Recaptcha\n                    key=\"captcha\"\n                    className=\"recaptcha\"\n                    onChange={this.handleReCaptcha}\n                    sitekey={settings.googleReCaptchaKey}\n                  />\n                </div>\n                <div ref={el => { this.AnimationElements[5] = el }}>\n                  <a role='button' className='cta dark' onClick={ this.handleSubmit }>Send Message</a>\n                </div>\n                <p className=\"dark mini\"\n                  style={{ marginTop: 20, marginBottom: 20 }}\n                  ref={el => { this.AnimationElements[6] = el }}\n                >\n                  Or contact us at <a href='mailto:info@hospall.com' className='inline'>info@hospall.com</a>\n                </p>\n                <div className=\"delivery-info\" ref={el => { this.AnimationElements[7] = el }}>\n                  { this.state.email.submitted ? (\n                    <Fragment>\n                      { this.state.email.sent &&\n                        <Fragment>\n                          <p style={{ fontWeight: 400 }}>Your message has been sent!</p>\n                          <p>A member of our team will be in touch with you as soon as possible.</p>\n                        </Fragment>  \n                      }\n                      { this.state.email.failed &&\n                        <p>{this.state.email.formError || 'Sorry, there was an error sending your email. Please try again later.'}</p>\n                      }\n                      { !this.state.email.sent && !this.state.email.failed &&\n                        <p>Sending email...</p>\n                      }\n                    </Fragment>\n                    ) : <p>{ this.state.email.formError }</p>\n                  }\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n\nJobApplication.defaultProps = {\n  windowWidth: 960,\n  windowHeight: 570\n};\n\nexport default JobApplication;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAmCA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AA3CA;AACA;AADA;AA8CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhDA;AACA;AADA;AAmDA;AACA;AADA;AAnDA;AACA;AADA;AAwDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAdA;AAeA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AArBA;AAHA;AA2BA;AAAA;AAAA;AACA;AACA;AAxGA;AACA;AADA;AA4GA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAnHA;AACA;AADA;AAuHA;AACA;AADA;AACA;AAEA;AACA;AADA;AA1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAUA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAlBA;AAkBA;AACA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAiGA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AADA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAoBA;;;;AAtOA;AACA;AAsOA;AAEA;AACA;AACA;AAFA;AAKA;;;;;A","sourceRoot":""}
